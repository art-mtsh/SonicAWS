Index: base_arebete.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/base_arebete.py b/base_arebete.py
--- a/base_arebete.py	
+++ b/base_arebete.py	(date 1695724087975)
@@ -19,116 +19,100 @@
 bybit_frame = ['1', '5', '15', '30', '60']
 
 price_filter = 100000
-ticksize_filter = 0.05
+ticksize_filter = 100
 
 divergence_filter = 0.3
 
 
-def calculation(instr, ticksize_filter):
+def calculation(instr):
+	
 	for frame in range(0, 1):
 		for symbol in instr:
 			# --- BINANCE DATA ---
 			binance_klines = 'https://fapi.binance.com/fapi/v1/klines?symbol=' + symbol + '&interval=' + binance_frame[frame] + '&limit=999'
-			binance_data = get(binance_klines).json()
-			binance_pd = pd.DataFrame(binance_data)
-			if not binance_pd.empty:
-				binance_pd.columns = [
-					'open_time',
-					'binOpen',
-					'binHigh',
-					'binLow',
-					'binClose',
-					'binVolume',
-					'binClose_time',
-					'qav',
-					'num_trades',
-					'taker_base_vol',
-					'taker_quote_vol',
-					'is_best_match'
-				]
-				binance_df = binance_pd
-				
-				binance_df['binOpen'] = binance_df['binOpen'].astype(float)
-				binance_df['binHigh'] = binance_df['binHigh'].astype(float)
-				binance_df['binLow'] = binance_df['binLow'].astype(float)
-				binance_df['binClose'] = binance_df['binClose'].astype(float)
-				
-				binOpen = binance_df['binOpen'].to_numpy()
-				binHigh = binance_df['binHigh'].to_numpy()
-				binLow = binance_df['binLow'].to_numpy()
-				binClose = binance_df['binClose'].to_numpy()
+			binance_klines = get(binance_klines)
+			if binance_klines.status_code == 200:
+				if len(binance_klines.json()) == 999:
+					binance_candle_data = binance_klines.json()
+					
+					bin_open = list(float(i[1]) for i in binance_candle_data)
+					bin_high = list(float(i[2]) for i in binance_candle_data)
+					bin_low = list(float(i[3]) for i in binance_candle_data)
+					bin_close = list(float(i[4]) for i in binance_candle_data)
 			
-				# --- BYBIT DATA ---
-				bybit_klines = f'https://api.bybit.com/v5/market/kline?category=inverse&symbol={symbol}&interval={bybit_frame[frame]}&limit=999'
-				bybit_data = get(bybit_klines).json()
-				bybit_pd = pd.DataFrame(bybit_data)
+					# --- BYBIT DATA ---
+					bybit_klines = f'https://api.bybit.com/v5/market/kline?category=inverse&symbol={symbol}&interval={bybit_frame[frame]}&limit=999'
+					bybit_klines = get(bybit_klines)
+					if bybit_klines.status_code == 200:
+						if len(bybit_klines.json()) == 999:
+							bybit_candle_data = bybit_klines.json().get("result").get("list")
 				
-				if not bybit_pd.empty:
-					data_list = bybit_pd["result"]["list"]
-					column_names = ["time_start", "bybOpen", "bybHigh", "bybLow", "bybClose", "volume", "some_column"]
-					bybit_df = pd.DataFrame(data_list, columns=column_names)
-					
-					bybit_df['bybOpen'] = bybit_df['bybOpen'].astype(float)
-					bybit_df['bybHigh'] = bybit_df['bybHigh'].astype(float)
-					bybit_df['bybLow'] = bybit_df['bybLow'].astype(float)
-					bybit_df['bybClose'] = bybit_df['bybClose'].astype(float)
-					
-					bybOpen = bybit_df['bybOpen'].to_numpy()[::-1]
-					bybHigh = bybit_df['bybHigh'].to_numpy()[::-1]
-					bybLow = bybit_df['bybLow'].to_numpy()[::-1]
-					bybClose = bybit_df['bybClose'].to_numpy()[::-1]
-					
-					# ==== bybit ticksize ====
-					all_ticks = list(bybOpen[-1:-1 - 900:-1]) + \
-				            list(bybHigh[-1:-1 - 900:-1]) + \
-				            list(bybLow[-1:-1 - 900:-1]) + \
-				            list(bybClose[-1:-1 - 900:-1])
-					all_ticks = sorted(all_ticks)
-					
-					diffs = 10
-					
-					for u in range(0, len(all_ticks) - 1):
-						if 0 < all_ticks[-u] - all_ticks[-u - 1] < diffs:
-							diffs = all_ticks[-u] - all_ticks[-u - 1]
-					
-					bybit_tick_size = float('{:.4f}'.format(diffs / (bybClose[-1] / 100)))
-					current_clean = float('{:.2f}'.format(abs(binClose[-1] - bybClose[-1]) / (binClose[-1] / 100)))
-		
-					if len(binClose) > 725 and len(bybClose) > 725:
-						divers = []
-						for l in range(1, 721):
-							distance_per = abs(binClose[-l] - bybClose[-l]) / (binClose[-l] / 100)
-							distance_per = float('{:.2f}'.format(distance_per))
-							divers.append(distance_per)
-						
-						# 0.18 fee
-						# 0.14 spread
-						# 0.20 slippage
-						# 0.20 min point
-						# 0.20 profit
-						# 0.72 - filter
-						
-						if len(divers) > 1:
-							if max(divers) - min(divers) >= 0.72:
-								print(f"{symbol}, {divers}")
-							results = []
-							
-							for d in range(0, len(divers)-1):
-								if abs(divers[d] - divers[d+1]) >= 0.72:
-									results.append(abs(divers[d] - divers[d+1]))
-
-							if len(results) != 0:
-								print(f"{symbol} : {sum(results)} по сусіднім хвилинам")
+							byb_open = list(float(i[1]) for i in bybit_candle_data)[::-1]
+							byb_high = list(float(i[2]) for i in bybit_candle_data)[::-1]
+							byb_low = list(float(i[3]) for i in bybit_candle_data)[::-1]
+							byb_close = list(float(i[4]) for i in bybit_candle_data)[::-1]
+							
+							# --- COUNTING DIVERGENCES ---
+							divers = []
+							for l in range(2, 722):
+								
+								# ==== binance ticksize ====
+								all_ticks = list(bin_open[-1:-1 - 200:-1]) + \
+								            list(bin_high[-1:-1 - 200:-1]) + \
+								            list(bin_low[-1:-1 - 200:-1]) + \
+								            list(bin_close[-1:-1 - 200:-1])
+								all_ticks = sorted(all_ticks)
+								diffs = 10
+								for u in range(0, len(all_ticks) - 1):
+									if 0 < all_ticks[-u] - all_ticks[-u - 1] < diffs:
+										diffs = all_ticks[-u] - all_ticks[-u - 1]
+								binance_tick_size = float('{:.4f}'.format(diffs / (bin_close[-1] / 100)))
+								
+								# ==== bybit ticksize ====
+								all_ticks = list(byb_open[-1:-1 - 900:-1]) + \
+								            list(byb_high[-1:-1 - 900:-1]) + \
+								            list(byb_low[-1:-1 - 900:-1]) + \
+								            list(byb_close[-1:-1 - 900:-1])
+								all_ticks = sorted(all_ticks)
+								diffs = 10
+								for u in range(0, len(all_ticks) - 1):
+									if 0 < all_ticks[-u] - all_ticks[-u - 1] < diffs:
+										diffs = all_ticks[-u] - all_ticks[-u - 1]
+								bybit_tick_size = float('{:.4f}'.format(diffs / (byb_close[-1] / 100)))
+							
+								if binance_tick_size <= 0.02 and bybit_tick_size <= 0.02:
+									distance_per = abs(bin_close[-l] - byb_close[-l]) / (bin_close[-l] / 100)
+									distance_per = float('{:.2f}'.format(distance_per))
+									divers.append(distance_per)
+							
+							# 0.18 fee
+							# 0.14 spread
+							# 0.20 slippage
+							# 0.20 min point - not relevant in history
+							# 0.20 profit
+							# 0.72 - filter
+							
+							if len(divers) > 1:
+								if max(divers) - min(divers) >= 0.72:
+									print(f"{symbol}, {divers}")
+								results = []
+								
+								for d in range(0, len(divers) - 1):
+									if abs(divers[d] - divers[d + 1]) >= 0.72:
+										results.append(abs(divers[d] - divers[d + 1]))
+								
+								if len(results) != 0:
+									print(f"{symbol} : {sum(results)} по сусіднім хвилинам")
 					
 					
-					# if len(binClose) > 60 and \
+					# if len(bin_close) > 60 and \
 					# 	len(bybClose) > 60 and \
 					# 	current_clean >= divergence_filter and \
 					# 	bybit_tick_size <= ticksize_filter:
 					#
 					# 	divers = []
 					# 	for l in range(1, 61):
-					# 		distance_per = abs(binClose[-l] - bybClose[-l]) / (binClose[-l] / 100)
+					# 		distance_per = abs(bin_close[-l] - bybClose[-l]) / (bin_close[-l] / 100)
 					# 		distance_per = float('{:.2f}'.format(distance_per))
 					# 		divers.append(distance_per)
 					#
@@ -141,15 +125,15 @@
 					# 	Усе, що далі - наш прибуток.
 					# 	'''
 					# 	if current_clean - min(divers) >= divergence_filter:
-					# 		current_price_diff = float('{:.4f}'.format(abs(binClose[-1]-bybClose[-1])))
+					# 		current_price_diff = float('{:.4f}'.format(abs(bin_close[-1]-bybClose[-1])))
 					# 		print(f"#{symbol}:\n"
 					# 		      f"Current divergence: {current_clean}% > {divergence_filter}\n"
-					# 		      f"{binClose[-1]} - {bybClose[-1]} = {current_price_diff}\n"
+					# 		      f"{bin_close[-1]} - {bybClose[-1]} = {current_price_diff}\n"
 					# 		      f"Divs ranges is: {min(divers)} --> {max(divers)}\n")
 					#
 					# 		bot3.send_message(662482931, f"#{symbol}:\n"
 					# 		      f"Current divergence: {current_clean}% > {divergence_filter}\n"
-					# 		      f"{binClose[-1]} - {bybClose[-1]} = {current_price_diff}\n"
+					# 		      f"{bin_close[-1]} - {bybClose[-1]} = {current_price_diff}\n"
 					# 		      f"Divs ranges is: {min(divers)} --> {max(divers)}\n")
 					
 
@@ -167,7 +151,7 @@
 	the_processes = []
 	
 	for i in range(threads):
-		process = Process(target=calculation, args=(instr[i], ticksize_filter))
+		process = Process(target=calculation, args=(instr[i]))
 		the_processes.append(process)
 	
 	for pro in the_processes:
